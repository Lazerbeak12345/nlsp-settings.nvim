{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Setting of sourcekit",
  "properties": {
    "swift.autoGenerateLaunchConfigurations": {
      "default": true,
      "markdownDescription": "When loading a `Package.swift`, auto-generate `launch.json` configurations for running any executables.",
      "order": 4,
      "type": "boolean"
    },
    "swift.backgroundCompilation": {
      "default": false,
      "markdownDescription": "**Experimental**: Run `swift build` in the background whenever a file is saved.",
      "order": 7,
      "type": "boolean"
    },
    "swift.buildArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Arguments to pass to `swift build`. Keys and values should be provided as separate entries. If you have created a copy of the build task in `tasks.json` then these build arguments will not be propogated to that task.",
      "order": 2,
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.buildPath": {
      "default": "",
      "markdownDescription": "Path to the build directory passed to all swift package manager commands.",
      "order": 8,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.excludePathsFromPackageDependencies": {
      "default": [
        ".git",
        ".github"
      ],
      "description": "A list of paths to exclude from the Package Dependencies view.",
      "items": {
        "type": "string"
      },
      "order": 6,
      "type": "array"
    },
    "swift.path": {
      "default": "",
      "markdownDescription": "The path of the folder containing the Swift executables. The default is to look in **$PATH**.",
      "order": 1,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.problemMatchCompileErrors": {
      "default": true,
      "description": "List compile errors in the Problems View.",
      "order": 5,
      "type": "boolean"
    },
    "swift.testEnvironmentVariables": {
      "default": {},
      "markdownDescription": "Environment variables to set when running tests. To set environment variables when debugging an application you should edit the relevant `launch.json` configuration",
      "order": 3,
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      },
      "scope": "machine-overridable",
      "type": "object"
    }
  }
}
