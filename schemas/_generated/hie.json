{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Setting of hie",
  "properties": {
    "haskell.checkProject": {
      "default": true,
      "description": "Whether to typecheck the entire project on load. It could drive to bad perfomance in large projects.",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.formattingProvider": {
      "default": "ormolu",
      "description": "The formatter to use when formatting a document or range. Ensure the plugin is enabled.",
      "enum": [
        "brittany",
        "floskell",
        "fourmolu",
        "ormolu",
        "stylish-haskell",
        "none"
      ],
      "scope": "resource",
      "type": "string"
    },
    "haskell.logFile": {
      "default": "",
      "description": "If set, redirects the logs to a file.",
      "scope": "resource",
      "type": "string"
    },
    "haskell.maxCompletions": {
      "default": 40,
      "description": "Maximum number of completions sent to the editor.",
      "scope": "resource",
      "type": "integer"
    },
    "haskell.openDocumentationInHackage": {
      "default": true,
      "description": "When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode.",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.openSourceInHackage": {
      "default": true,
      "description": "When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode.",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.class.globalOn": {
      "default": true,
      "description": "Enables type class plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.eval.globalOn": {
      "default": true,
      "description": "Enables eval plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.ghcide-completions.config.autoExtendOn": {
      "default": true,
      "markdownDescription": "Extends the import list automatically when completing a out-of-scope identifier",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.ghcide-completions.config.snippetsOn": {
      "default": true,
      "markdownDescription": "Inserts snippets when using code completions",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.ghcide-type-lenses.config.mode": {
      "default": true,
      "description": "Control how type lenses are shown",
      "enum": [
        "always",
        "exported",
        "diagnostics"
      ],
      "enumDescriptions": [
        "Always displays type lenses of global bindings",
        "Only display type lenses of exported global bindings",
        "Follows error messages produced by GHC about missing signatures"
      ],
      "scope": "resource",
      "type": "string"
    },
    "haskell.plugin.ghcide-type-lenses.globalOn": {
      "default": true,
      "description": "Enables type lenses plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.haddockComments.globalOn": {
      "default": true,
      "description": "Enables haddock comments plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.hlint.codeActionsOn": {
      "default": true,
      "description": "Enables hlint code actions (apply hints)",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.hlint.config.flags": {
      "default": [],
      "markdownDescription": "Flags used by hlint",
      "scope": "resource",
      "type": "array"
    },
    "haskell.plugin.hlint.diagnosticsOn": {
      "default": true,
      "description": "Enables hlint diagnostics",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.importLens.codeActionsOn": {
      "default": true,
      "description": "Enables explicit imports code actions",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.importLens.codeLensOn": {
      "default": true,
      "description": "Enables explicit imports code lenses",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.moduleName.globalOn": {
      "default": true,
      "description": "Enables module name plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.pragmas.codeActionsOn": {
      "default": true,
      "description": "Enables pragmas code actions",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.pragmas.completionOn": {
      "default": true,
      "description": "Enables pragmas completions",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.refineImports.globalOn": {
      "default": true,
      "description": "Enables refine imports plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.retrie.globalOn": {
      "default": true,
      "description": "Enables retrie plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.splice.globalOn": {
      "default": true,
      "description": "Enables splice plugin (expand template haskell definitions)",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.tactics.config.auto_gas": {
      "default": 4,
      "markdownDescription": "The depth of the search tree when performing \"Attempt to fill hole\". Bigger values will be able to derive more solutions, but will take exponentially more time.",
      "scope": "resource",
      "type": "integer"
    },
    "haskell.plugin.tactics.config.hole_severity": {
      "default": null,
      "description": "The severity to use when showing hole diagnostics.",
      "enum": [
        1,
        2,
        3,
        4,
        null
      ],
      "enumDescriptions": [
        "error",
        "warning",
        "info",
        "hint",
        "none"
      ],
      "scope": "resource",
      "type": "string"
    },
    "haskell.plugin.tactics.config.max_use_ctor_actions": {
      "default": 5,
      "markdownDescription": "Maximum number of `Use constructor <x>` code actions that can appear",
      "scope": "resource",
      "title": "Max number of constructors",
      "type": "integer"
    },
    "haskell.plugin.tactics.config.proofstate_styling": {
      "default": true,
      "markdownDescription": "Should Wingman emit styling markup when showing metaprogram proof states?",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.plugin.tactics.config.timeout_duration": {
      "default": 2,
      "markdownDescription": "The timeout for Wingman actions, in seconds",
      "scope": "resource",
      "type": "integer"
    },
    "haskell.plugin.tactics.globalOn": {
      "default": true,
      "description": "Enables Wingman (tactics) plugin",
      "scope": "resource",
      "type": "boolean"
    },
    "haskell.releasesDownloadStoragePath": {
      "default": "",
      "markdownDescription": "An optional path where downloaded binaries will be stored. Check the default value [here](https://github.com/haskell/vscode-haskell#downloaded-binaries)",
      "scope": "resource",
      "type": "string"
    },
    "haskell.releasesURL": {
      "default": "",
      "description": "An optional URL to override where to check for haskell-language-server releases",
      "scope": "resource",
      "type": "string"
    },
    "haskell.serverExecutablePath": {
      "default": "",
      "markdownDescription": "Manually set a language server executable. Can be something on the $PATH or a path to an executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`. **Deprecated scope**: This option will be set to `machine` scope in a future release, so it can be changed only globally, not per workspace.",
      "scope": "resource",
      "type": "string"
    },
    "haskell.serverExtraArgs": {
      "default": "",
      "markdownDescription": "Pass additional arguments to the language server.",
      "scope": "resource",
      "type": "string"
    },
    "haskell.trace.client": {
      "default": "error",
      "description": "Sets the log level in the client side.",
      "enum": [
        "off",
        "error",
        "debug"
      ],
      "scope": "resource",
      "type": "string"
    },
    "haskell.trace.server": {
      "default": "off",
      "description": "Traces the communication between VS Code and the language server.",
      "enum": [
        "off",
        "messages"
      ],
      "scope": "resource",
      "type": "string"
    },
    "haskell.updateBehavior": {
      "default": "keep-up-to-date",
      "enum": [
        "keep-up-to-date",
        "prompt",
        "never-check"
      ],
      "enumDescriptions": [
        "Always download the latest available version when it is published",
        "Prompt before upgrading to a newer version",
        "Don't check for newer versions"
      ],
      "markdownDescription": "Determine what to do when a new version of the language server is available.",
      "scope": "machine",
      "type": "string"
    }
  }
}
